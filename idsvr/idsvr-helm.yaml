---
# Source: idsvr/templates/network.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: curity-idsvr-network-policy
spec:
  podSelector:
    matchLabels:
      role: curity-idsvr-admin
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              role: curity-idsvr-runtime
      ports:
        - protocol: TCP
          port: 6789
---
# Source: idsvr/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: curity-idsvr-service-account
  labels:
    app.kubernetes.io/name: idsvr
    helm.sh/chart: idsvr-0.9.24
    app.kubernetes.io/instance: curity
    app.kubernetes.io/managed-by: Helm
---
# Source: idsvr/templates/cluster-conf.yaml
apiVersion: v1
kind: Secret
metadata:
  name: curity-idsvr-cluster-config-xml
type: Opaque
data:
  placeholder: Y3VyaXR5
---
# Source: idsvr/templates/cluster-conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: curity-idsvr-cluster-conf-map
  labels:
    app.kubernetes.io/name: idsvr
    helm.sh/chart: idsvr-0.9.24
    app.kubernetes.io/instance: curity
    app.kubernetes.io/managed-by: Helm
data:
  createConfigSecret.sh: |
    #!/bin/bash

    CA_CERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)

    CLUSTER_XML=$(/opt/idsvr/bin/genclust -c ${CONFIG_SERVICE_HOST} -p ${CONFIG_SERVICE_PORT} | base64 -w 0)

    REQUEST_CONTENT="[{\"op\": \"add\", \"path\": \"/data/cluster-$REVISION.xml\", \"value\": \"$CLUSTER_XML\"}]"
    openssl 2>&1 s_client -CAfile $CA_CERT -quiet -connect kubernetes.default:443 <<EOF
    PATCH /api/v1/namespaces/$NAMESPACE/secrets/$SECRET_NAME HTTP/1.1
    Host: kubernetes.default
    Authorization: Bearer $TOKEN
    Connection: close
    Content-Type: application/json-patch+json
    Content-length: ${#REQUEST_CONTENT}
    Accept: application/json

    $REQUEST_CONTENT
    EOF
---
# Source: idsvr/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: curity-idsvr-create-secret
  labels:
    app.kubernetes.io/name: idsvr
    helm.sh/chart: idsvr-0.9.24
    app.kubernetes.io/instance: curity
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - patch
---
# Source: idsvr/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: curity-idsvr-role-binding
  labels:
    app.kubernetes.io/name: idsvr
    helm.sh/chart: idsvr-0.9.24
    app.kubernetes.io/instance: curity
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: curity-idsvr-create-secret
subjects:
  - kind: ServiceAccount
    name: curity-idsvr-service-account
---
# Source: idsvr/templates/service-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: curity-idsvr-admin-svc
  labels:
    app.kubernetes.io/name: idsvr
    helm.sh/chart: idsvr-0.9.24
    app.kubernetes.io/instance: curity
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 6789
      targetPort: config-port
      protocol: TCP
      name: config-port
    - port: 4465
      targetPort: health-check
      protocol: TCP
      name: health-check
    - port:  4466
      targetPort: metrics
      protocol: TCP
      name: metrics
    - port: 6749
      targetPort: admin-ui
      protocol: TCP
      name: admin-ui
  selector:
    app.kubernetes.io/name: idsvr
    app.kubernetes.io/instance: curity
---
# Source: idsvr/templates/service-runtime.yaml
apiVersion: v1
kind: Service
metadata:
  name: curity-idsvr-runtime-svc
  labels:
    app.kubernetes.io/name: idsvr
    helm.sh/chart: idsvr-0.9.24
    app.kubernetes.io/instance: curity
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8443
      targetPort: http-port
      protocol: TCP
      name: http-port
    - port: 4465
      targetPort: health-check
      protocol: TCP
      name: health-check
    - port:  4466
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: idsvr
    app.kubernetes.io/instance: curity
    role: curity-idsvr-runtime
---
# Source: idsvr/templates/deployment-admin.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: curity-idsvr-admin
  labels:
    app.kubernetes.io/name: idsvr
    helm.sh/chart: idsvr-0.9.24
    app.kubernetes.io/instance: curity
    app.kubernetes.io/managed-by: Helm
    role: curity-idsvr-admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: idsvr
      app.kubernetes.io/instance: curity
  template:
    metadata:
      labels:
        app.kubernetes.io/name: idsvr
        helm.sh/chart: idsvr-0.9.24
        app.kubernetes.io/instance: curity
        app.kubernetes.io/managed-by: Helm
        role: curity-idsvr-admin
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "4466"
    spec:
      containers:
        - name: idsvr-admin
          image: "custom_idsvr:6.3.1"
          imagePullPolicy: Never
          command: ["/opt/idsvr/bin/idsvr"]
          args: ["-s", "admin",
                 "-N", "idsvr-admin","--admin"]
          env:
            - name: STATUS_CMD_PORT
              value: "4465"
            - name: LOGGING_LEVEL
              value: INFO
            - name: ADMIN_UI_HTTP_MODE
              value: "false"
            - name: PASSWORD
              value: "Password1"
          ports:
            - name: config-port
              containerPort: 6789
              protocol: TCP
            - name: health-check
              containerPort: 4465
              protocol: TCP
            - name: metrics
              containerPort: 4466
              protocol: TCP
            - name: admin-ui
              containerPort: 6749
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: health-check
            timeoutSeconds:  1
            failureThreshold: 3
            periodSeconds: 10
            initialDelaySeconds: 120
          readinessProbe:
            httpGet:
              path: /
              port: health-check
            timeoutSeconds:  1
            failureThreshold: 3
            successThreshold: 3
            periodSeconds: 10
            initialDelaySeconds: 120
          volumeMounts:
            - mountPath: /opt/idsvr/etc/init/cluster.xml
              subPath: cluster.xml
              name: cluster-xml
              readOnly: true
            - mountPath: /opt/idsvr/etc/init/configmap-config.xml
              subPath: idsvr-config-backup.xml
              name: configmap-config
              readOnly: true
          resources:
            {}
      volumes:
        - name: cluster-xml
          secret:
            secretName: curity-idsvr-cluster-config-xml
            items:
              - key: cluster-1.xml
                path: cluster.xml
        - name: configmap-config
          configMap:
            name: idsvr-configmap
---
# Source: idsvr/templates/deployment-runtime.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: curity-idsvr-runtime
  labels:
    app.kubernetes.io/name: idsvr
    helm.sh/chart: idsvr-0.9.24
    app.kubernetes.io/instance: curity
    app.kubernetes.io/managed-by: Helm
    role: curity-idsvr-runtime
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: idsvr
      app.kubernetes.io/instance: curity
      role: curity-idsvr-runtime
  template:
    metadata:
      labels:
        app.kubernetes.io/name: idsvr
        helm.sh/chart: idsvr-0.9.24
        app.kubernetes.io/instance: curity
        app.kubernetes.io/managed-by: Helm
        role: curity-idsvr-runtime
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "4466"
    spec:
      containers:
        - name: idsvr-runtime
          image: "custom_idsvr:6.3.1"
          imagePullPolicy: Never
          command: ["/opt/idsvr/bin/idsvr"]
          args: ["-s", "default","--no-admin"]
          env:
            - name: STATUS_CMD_PORT
              value: "4465"
            - name: LOGGING_LEVEL
              value: INFO
          ports:
            - name: http-port
              containerPort: 8443
              protocol: TCP
            - name: health-check
              containerPort: 4465
              protocol: TCP
            - name: metrics
              containerPort: 4466
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: health-check
            timeoutSeconds:  1
            failureThreshold: 3
            periodSeconds: 10
            initialDelaySeconds: 120
          readinessProbe:
            httpGet:
              path: /
              port: health-check
            timeoutSeconds:  1
            failureThreshold: 3
            successThreshold: 3
            periodSeconds: 10
            initialDelaySeconds: 120
          volumeMounts:
            - mountPath: /opt/idsvr/etc/init/cluster.xml
              subPath: cluster.xml
              name: cluster-xml
              readOnly: true
            - mountPath: /opt/idsvr/etc/init/configmap-config.xml
              subPath: idsvr-config-backup.xml
              name: configmap-config
              readOnly: true
          resources:
            {}
      volumes:
        - name: cluster-xml
          secret:
            secretName: curity-idsvr-cluster-config-xml
            items:
              - key: cluster-1.xml
                path: cluster.xml
        - name: configmap-config
          configMap:
            name: idsvr-configmap
---
# Source: idsvr/templates/cluster-conf.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: curity-idsvr-1-cluster-conf-job
  labels:
    app.kubernetes.io/name: idsvr
    helm.sh/chart: idsvr-0.9.24
    app.kubernetes.io/instance: curity
    app.kubernetes.io/managed-by: Helm
spec:
  ttlSecondsAfterFinished: 60
  template:
    spec:
      containers:
        - name: curity-idsvr-cluster-conf-job
          image: "custom_idsvr:6.3.1"
          command: ["sh",  "/opt/idsvr/bin/createConfigSecret.sh"]
          env:
            - name: CONFIG_SERVICE_HOST
              value: curity-idsvr-admin-svc
            - name: CONFIG_SERVICE_PORT
              value: "6789"
            - name: SECRET_NAME
              value: curity-idsvr-cluster-config-xml
            - name: REVISION
              value: "1"
            
          volumeMounts:
            - name: entrypoint-volume
              mountPath: /opt/idsvr/bin/createConfigSecret.sh
              subPath: createConfigSecret.sh
      volumes:
        - name: entrypoint-volume
          configMap:
            name: curity-idsvr-cluster-conf-map
      serviceAccountName: curity-idsvr-service-account
      restartPolicy: Never
---
# Source: idsvr/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: curity-idsvr-ingress
  labels:
    app.kubernetes.io/name: idsvr
    helm.sh/chart: idsvr-0.9.24
    app.kubernetes.io/instance: curity
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
spec:
  tls:
    - hosts:
        - admin.curity.local
      secretName: curity-local-tls
    - hosts:
        - login.curity.local
      secretName: curity-local-tls
  rules:
    - host: login.curity.local
      http:
        paths:
          - path: /
            backend:
              serviceName: curity-idsvr-runtime-svc
              servicePort: http-port
    - host: admin.curity.local
      http:
        paths:
          - path: /
            backend:
              serviceName: curity-idsvr-admin-svc
              servicePort: admin-ui
